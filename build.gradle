import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'signing'
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceCompatibility = targetCompatibility = 1.8

def versionObject = new Version(major: 2, minor: "BETA")
version "$versionObject"

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:3.13.0'
    implementation 'org.json:json:20160810'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.jetbrains:annotations:23.0.0'
}

javadoc {
    failOnError = false
    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        encoding = "UTF-8"
    }
    if (options instanceof StandardJavadocDocletOptions) {
        StandardJavadocDocletOptions opt = options
        opt.author()
        opt.tags("incubating:a:Incubating:")
        opt.links(
                "https://docs.oracle.com/javase/8/docs/api/",
                "https://javadoc.io/doc/com.squareup.okhttp3/okhttp/3.13.0/")
        if (JavaVersion.current().isJava9Compatible()) {
            opt.addBooleanOption("html5", true)
            opt.addStringOption("-release", "8")
        }
        if (JavaVersion.current().isJava11Compatible()) {
            opt.addBooleanOption("-no-module-directories", true)
        }
    }

    exclude("com/mattmalec/pterodactyl4j/utils/Checks.java",
            "com/mattmalec/pterodactyl4j/utils/ExceptionUtils.java",
            "com/mattmalec/pterodactyl4j/utils/LockUtils.java",
            "com/mattmalec/pterodactyl4j/utils/NamedThreadFactory.java",

            "com/mattmalec/pterodactyl4j/entities/impl",
            "com/mattmalec/pterodactyl4j/application/entities/impl",
            "com/mattmalec/pterodactyl4j/client/entities/impl",

            "com/mattmalec/pterodactyl4j/client/ws/handle",
            "com/mattmalec/pterodactyl4j/client/ws/WebSocketClient.java",
            "com/mattmalec/pterodactyl4j/client/ws/WebSocketAction.java")
}

task sourcesForRelease(type: Copy) {
    from('src/main/java') {
        include '**/P4JInfo.java'
        filter(ReplaceTokens, tokens: [
                MAJOR: versionObject.major,
                MINOR: versionObject.minor,
                BUILD: versionObject.build
        ])
    }
    into 'build/filteredSrc'
    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.java.filter {
        it.name != 'P4JInfo.java'
    }
    source = javaSources + sourcesForRelease.destinationDir
    dependsOn sourcesForRelease
}

shadowJar.archiveClassifier.set('withDependencies')

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from ('src/main/java') {
        exclude '**/P4JInfo.java'
    }
    from sourcesForRelease.destinationDir
    dependsOn sourcesForRelease
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

build {
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    jar.mustRunAfter clean
    shadowJar.mustRunAfter sourcesJar
}

compileJava {
    source = generateJavaSources.source
    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

class Version {
    String major, minor
    def build = System.getenv('BUILD_NUMBER') ?: 'DEV'

    String toString() {
        return "$major.${minor}_$build"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            version = version
            artifactId = 'Pterodactyl4J'
            groupId = 'com.mattmalec'

            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = project.name
                description = 'Java wrapper for the API of Pterodactyl'
                url = 'https://github.com/mattmalec/Pterodactyl4J'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'mattmalec'
                        name = 'Matt Malec'
                        email = 'matt@mattmalec.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/mattmalec/Pterodactyl4J'
                    developerConnection = 'scm:git:ssh://github.com/mattmalec/Pterodactyl4J'
                    url = 'https://github.com/mattmalec/Pterodactyl4J'
                }
            }

            repositories {
                maven {
                    name 'Jenkins'
                    url  'https://repo.mattmalec.com/repository/releases'
                    credentials {
                        username = System.getenv('jenkinsUsername')
                        password = System.getenv('jenkinsPassword')
                    }
                }
            }
        }
    }
}
